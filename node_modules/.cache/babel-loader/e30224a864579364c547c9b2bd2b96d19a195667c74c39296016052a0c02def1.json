{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, isSignInWithEmailLink, onAuthStateChanged, sendSignInLinkToEmail, signInWithEmailAndPassword, signInWithEmailLink, signOut, updatePassword } from \"firebase/auth\";\nimport { collection, deleteDoc, doc, getDoc, getFirestore, onSnapshot, setDoc } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDHTYHXBArEA-6bqGFdbqsG1_KLuzGRE2I\",\n  authDomain: \"rizzy-bodycraft-record.firebaseapp.com\",\n  projectId: \"rizzy-bodycraft-record\",\n  storageBucket: \"rizzy-bodycraft-record.appspot.com\",\n  messagingSenderId: \"930408534506\",\n  appId: \"1:930408534506:web:127e3be9dd6236d9836293\",\n  measurementId: \"G-SKFHESV2J6\"\n};\nexport default class Firebase {\n  constructor() {\n    this.app = void 0;\n    this.auth = void 0;\n    this.firestore = void 0;\n    console.log(\"initializing firebase\");\n    this.app = initializeApp(firebaseConfig);\n    this.auth = getAuth(this.app);\n    this.firestore = getFirestore(this.app);\n  }\n  static get instance() {\n    return Firebase._inst;\n  }\n  static init() {\n    if (!Firebase._inst) Firebase._inst = new Firebase();\n  }\n\n  // auth\n\n  async signup(email, password, name) {\n    updatePassword(this.auth.currentUser, password).then(() => {\n      this.updateUserProfile({\n        email,\n        name\n      });\n    }).catch(err => console.error(err));\n  }\n  async login(args) {\n    const {\n      email,\n      password\n    } = args;\n    if (email !== undefined) {\n      if (password !== undefined) {\n        return await new Promise((resolve, reject) => {\n          signInWithEmailAndPassword(this.auth, email, password).then(credential => {\n            console.log(credential);\n            resolve(true);\n          }).catch(err => {\n            console.error(err.code);\n            reject(false);\n          });\n        });\n      } else {\n        console.log(email);\n        return await new Promise((resolve, reject) => signInWithEmailLink(this.auth, email, window.location.href).then(result => {\n          console.log(result);\n          resolve(true);\n        }).catch(err => {\n          // auth/invalid-email\n          // auth/invalid-action-code when link used to login\n          console.error(err.code, err.message);\n          reject(false);\n        }));\n      }\n    }\n    return false;\n  }\n  async logout() {\n    await signOut(Firebase.instance.auth);\n  }\n  onAuthStateChanged(callback) {\n    return onAuthStateChanged(this.auth, user => callback(user));\n  }\n  approvePendingAccount(email) {\n    const actionCodeSettings = {\n      // URL you want to redirect back to. The domain (www.example.com) for this\n      // URL must be in the authorized domains list in the Firebase Console.\n      url: 'http://localhost:3000',\n      handleCodeInApp: true\n    };\n    sendSignInLinkToEmail(this.auth, email, actionCodeSettings).then(() => console.log(\"success\")).catch(err => console.log(\"failed\", err));\n  }\n  isAnnoymousAccount() {\n    return isSignInWithEmailLink(this.auth, window.location.href);\n  }\n\n  // firestore\n\n  onPendingAccountsChange(callback) {\n    return onSnapshot(collection(this.firestore, \"application\"), collection => {\n      let pendings = [];\n      collection.forEach(application => pendings.push(Object.assign({\n        id: application.id\n      }, application.data())));\n      callback(pendings);\n    });\n  }\n  async removePendingAccount(id) {\n    await deleteDoc(doc(this.firestore, \"application\", id));\n  }\n  async checkNewAccount(email) {\n    return (await getDoc(doc(this.firestore, \"user-profile\", email))).exists();\n  }\n  async updateUserProfile(profile) {\n    await setDoc(doc(this.firestore, \"user-profile\", profile.email), {\n      name: profile.name,\n      email: profile.email\n    });\n  }\n}\nFirebase._inst = void 0;","map":{"version":3,"names":["initializeApp","getAuth","isSignInWithEmailLink","onAuthStateChanged","sendSignInLinkToEmail","signInWithEmailAndPassword","signInWithEmailLink","signOut","updatePassword","collection","deleteDoc","doc","getDoc","getFirestore","onSnapshot","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","constructor","app","auth","firestore","console","log","instance","_inst","init","signup","email","password","name","currentUser","then","updateUserProfile","catch","err","error","login","args","undefined","Promise","resolve","reject","credential","code","window","location","href","result","message","logout","callback","user","approvePendingAccount","actionCodeSettings","url","handleCodeInApp","isAnnoymousAccount","onPendingAccountsChange","pendings","forEach","application","push","Object","assign","id","data","removePendingAccount","checkNewAccount","exists","profile"],"sources":["/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/firebase.ts"],"sourcesContent":["import { FirebaseApp, initializeApp } from \"firebase/app\";\nimport { Auth, createUserWithEmailAndPassword, getAdditionalUserInfo, getAuth, isSignInWithEmailLink, onAuthStateChanged, sendSignInLinkToEmail, signInWithEmailAndPassword, signInWithEmailLink, signOut, updatePassword, User, UserCredential } from \"firebase/auth\";\nimport { collection, deleteDoc, doc, Firestore, getDoc, getDocs, getFirestore, onSnapshot, setDoc } from \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDHTYHXBArEA-6bqGFdbqsG1_KLuzGRE2I\",\n  authDomain: \"rizzy-bodycraft-record.firebaseapp.com\",\n  projectId: \"rizzy-bodycraft-record\",\n  storageBucket: \"rizzy-bodycraft-record.appspot.com\",\n  messagingSenderId: \"930408534506\",\n  appId: \"1:930408534506:web:127e3be9dd6236d9836293\",\n  measurementId: \"G-SKFHESV2J6\"\n};\n\nexport type PendingApplcation = {\n    id: string,\n    name: string,\n    email: string\n    // apply_date:\n}\n\nexport default class Firebase {\n\n    private static _inst: Firebase;\n\n    app: FirebaseApp;\n    auth: Auth;\n    firestore: Firestore;\n\n    private constructor() {\n        console.log(\"initializing firebase\");\n        this.app = initializeApp(firebaseConfig);\n        this.auth = getAuth(this.app);\n        this.firestore = getFirestore(this.app)\n    }\n\n    public static get instance() {\n        return Firebase._inst;\n    }\n\n    static init() {\n        if (!Firebase._inst) Firebase._inst = new Firebase();\n    }\n\n    // auth\n\n    async signup(email: string, password: string, name: string) {\n        updatePassword(this.auth.currentUser!, password).then(() => {\n            this.updateUserProfile({ email, name });\n        }).catch(err => console.error(err));\n    }\n\n    async login(args: { email: string, password?: string }): Promise<boolean> {\n        const { email, password } = args;\n        if (email !== undefined) {\n            if (password !== undefined) {\n                return await new Promise((resolve, reject) => {\n                    signInWithEmailAndPassword(this.auth, email, password).then(credential => {\n                        console.log(credential);\n                        resolve(true);\n                    }).catch((err: { code: string, message: string } ) => {\n                        console.error(err.code);\n                        reject(false);\n                    });\n                });\n            }\n            else {\n                console.log(email);\n                return await new Promise((resolve, reject) =>\n                    signInWithEmailLink(this.auth, email, window.location.href).then(result => {\n                        console.log(result);\n                        resolve(true);\n                    }).catch((err: { code: string, message: string }) => {\n                        // auth/invalid-email\n                        // auth/invalid-action-code when link used to login\n                        console.error(err.code, err.message);\n                        reject(false)\n                    })\n                );\n            }\n        }\n        return false;\n    }\n\n    async logout() {\n        await signOut(Firebase.instance.auth);\n    }\n\n    onAuthStateChanged(callback: (user: User | null) => void) {\n        return onAuthStateChanged(this.auth, user => callback(user));\n    }\n\n    approvePendingAccount(email: string) {\n        const actionCodeSettings = {\n            // URL you want to redirect back to. The domain (www.example.com) for this\n            // URL must be in the authorized domains list in the Firebase Console.\n            url: 'http://localhost:3000',\n            handleCodeInApp: true\n        };\n        sendSignInLinkToEmail(this.auth, email, actionCodeSettings).then(() => console.log(\"success\")).catch((err) => console.log(\"failed\", err));\n    }\n\n    isAnnoymousAccount() {\n        return isSignInWithEmailLink(this.auth, window.location.href)\n    }\n\n    // firestore\n\n    onPendingAccountsChange(callback: (pendings: Array<PendingApplcation>) => void) {\n        return onSnapshot(collection(this.firestore, \"application\"), collection => {\n            let pendings: Array<PendingApplcation> = [];\n            collection.forEach(application => pendings.push(Object.assign({ id: application.id }, application.data() as { name: string, email: string })));\n            callback(pendings)\n        })\n    }\n\n    async removePendingAccount(id: string) {\n        await deleteDoc(doc(this.firestore, \"application\", id));\n    }\n\n    async checkNewAccount(email: string) {\n        return (await getDoc(doc(this.firestore, \"user-profile\", email))).exists();\n    }\n\n    async updateUserProfile(profile: { email: string, name: string }) {\n        await setDoc(doc(this.firestore, \"user-profile\", profile.email), {\n            name: profile.name,\n            email: profile.email\n        })\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}