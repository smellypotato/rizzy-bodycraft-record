[{"/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/index.tsx":"1","/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/App.tsx":"2","/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/pages/Login/Login.tsx":"3","/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/hooks/useInput.tsx":"4","/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/pages/User/Dashboard/Dashboard.tsx":"5","/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/components/Title/Title.tsx":"6","/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/components/ExerciseRecord/ExerciseRecord.tsx":"7","/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/Utils.ts":"8","/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/pages/Admin/Categories/Categories.tsx":"9","/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/components/DropdownMenu/DropdownMenu.tsx":"10","/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/firebase.ts":"11","/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/components/Menu/Menu.tsx":"12","/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/pages/Admin/StudentList/StudentList.tsx":"13","/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/pages/User/SignUp/Signup.tsx":"14","/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/hooks/contexts.tsx":"15","/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/type.ts":"16","/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/components/AddPanel/AddInputPanel.tsx":"17","/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/hooks/useAddPanel.tsx":"18","/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/components/AddPanel/AddChoicePanel.tsx":"19"},{"size":445,"mtime":1674720956113,"results":"20","hashOfConfig":"21"},{"size":2206,"mtime":1675148342047,"results":"22","hashOfConfig":"21"},{"size":1264,"mtime":1675326435969,"results":"23","hashOfConfig":"21"},{"size":299,"mtime":1673949484653,"results":"24","hashOfConfig":"21"},{"size":1036,"mtime":1674182660631,"results":"25","hashOfConfig":"21"},{"size":90,"mtime":1673948100245,"results":"26","hashOfConfig":"21"},{"size":2634,"mtime":1674122870557,"results":"27","hashOfConfig":"21"},{"size":457,"mtime":1674098040829,"results":"28","hashOfConfig":"21"},{"size":3716,"mtime":1675393948386,"results":"29","hashOfConfig":"21"},{"size":1305,"mtime":1675319119137,"results":"30","hashOfConfig":"21"},{"size":6801,"mtime":1675330579076,"results":"31","hashOfConfig":"21"},{"size":397,"mtime":1675149045875,"results":"32","hashOfConfig":"21"},{"size":1677,"mtime":1675215798396,"results":"33","hashOfConfig":"21"},{"size":3462,"mtime":1675144190260,"results":"34","hashOfConfig":"21"},{"size":128,"mtime":1675143964927,"results":"35","hashOfConfig":"21"},{"size":1394,"mtime":1675230143415,"results":"36","hashOfConfig":"21"},{"size":816,"mtime":1675393312160,"results":"37","hashOfConfig":"21"},{"size":755,"mtime":1675392316294,"results":"38","hashOfConfig":"21"},{"size":2104,"mtime":1675402388129,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1uzfs64",{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/index.tsx",[],[],"/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/App.tsx",["105"],[],"import { useEffect, useState } from \"react\";\nimport { Route, Routes, useNavigate } from \"react-router-dom\";\nimport { Menu } from \"./components/Menu/Menu\";\nimport Firebase from \"./firebase\";\nimport { SetLoggedInContext } from \"./hooks/contexts\";\nimport { Categories } from \"./pages/Admin/Categories/Categories\";\nimport { StudentList } from \"./pages/Admin/StudentList/StudentList\";\nimport { Login } from \"./pages/Login/Login\";\nimport { Dashboard } from \"./pages/User/Dashboard/Dashboard\";\nimport { SignUp } from \"./pages/User/SignUp/Signup\";\n\n// const path = \"dashboard\";\nconst path = \"student-list\";\n\nconst App = () => {\n    const navigate = useNavigate();\n    const [loggedIn, setLoggedIn] = useState(false); // temp\n\n    useEffect(() => {\n        const fromEmailLink = Firebase.instance.isAnnoymousAccount();\n        if (fromEmailLink) navigate(`/signup${window.location.search}`);\n        const unSubscribeAuthStateChange = Firebase.instance.onAuthStateChanged((user) => {\n            console.log(\"auth state changed\", user);\n            console.log(\"from email link\", fromEmailLink);\n            if (user && !fromEmailLink) {\n                setLoggedIn(true);\n                \n                navigate(`/${path}`);\n            }\n            else if (!fromEmailLink) {\n                setLoggedIn(false);\n\n                console.log(\"to login\");\n                navigate(\"/login\");\n            }\n        })\n        return () => {\n            unSubscribeAuthStateChange();\n        }\n    }, []);\n\n    return (\n        <div className=\"App\">\n            { loggedIn && <Menu /> }\n            <SetLoggedInContext.Provider value={ setLoggedIn }>\n                <Routes>\n                    <Route path=\"/student-list\" element={ <StudentList /> } />\n                    <Route path=\"/categories\" element={ <Categories /> } />\n                    <Route path=\"/dashboard\" element={ <Dashboard /> } />\n                    <Route path=\"/signup\" element={ <SignUp /> } />\n                    <Route path=\"/login\" element={ <Login /> } />\n                    <Route path=\"*\" element={ <Login /> } />\n                </Routes>\n            </SetLoggedInContext.Provider>\n        </div>\n    );\n}\n\nexport default App;\n","/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/pages/Login/Login.tsx",["106"],[],"import { useCallback } from \"react\";\nimport { Title } from \"../../components/Title/Title\";\nimport Firebase from \"../../firebase\";\nimport { useInput } from \"../../hooks/useInput\";\nimport \"./Login.css\";\n\nexport const Login = () => {\n    const [username, setUsername] = useInput(\"hksahenry@yahoo.com.hk\");\n    const [password, setPassword] = useInput(\"hksa13968629\");\n\n    const onInput = useCallback((set: React.Dispatch<string>, e: React.ChangeEvent<HTMLInputElement>) => {\n        set(e.currentTarget.value);\n    }, []);\n\n    const onLogin = () => {\n        Firebase.instance.login({ email: username, password: password });\n    };\n\n    return (\n        <main id=\"login\">\n            <Title />\n            <section>\n                <input type=\"text\" value={ username } placeholder=\"Username\" onChange={ (e) => onInput(setUsername, e) } />\n                <input type=\"text\" value={ password } placeholder=\"Password\" onChange={ (e) => onInput(setPassword, e) } />\n                <a id=\"login-forget\">Forget password?</a>\n                <div id=\"login-buttons\">\n                    <button id=\"user\" onClick={ onLogin }>Login</button><button id=\"admin\" onClick={ onLogin }>Admin Login</button>\n                </div>\n            </section>\n        </main>\n    )\n}\n","/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/hooks/useInput.tsx",[],[],[],"/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/pages/User/Dashboard/Dashboard.tsx",[],[],"/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/components/Title/Title.tsx",[],[],"/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/components/ExerciseRecord/ExerciseRecord.tsx",["107"],[],"import { useCallback, useState } from 'react';\nimport { Utils } from '../../Utils';\nimport './ExerciseRecord.css';\n\nenum MONTH {\n    JAN = 0,\n    FEB,\n    MAR,\n    APR,\n    MAY,\n    JUN,\n    JUL,\n    AUG,\n    SEP,\n    OCT,\n    NOV,\n    DEC\n}\n\nexport const ExerciseRecord = (props: { currentYear: number }) => {\n\n    const [weeks] = useState(Utils.newArray(12).map((month) => Utils.weeksInMonth(props.currentYear, month) - (month !== MONTH.JAN && new Date(props.currentYear, month, 1).getDay() !== 0 ? 1 : 0)));\n\n    return (\n        <section id=\"exercise_record\" title=\" Your work\">\n            <h3>Your work in { props.currentYear }</h3>\n\n            <section id=\"record_table\">\n                <div id=\"days\">\n                    <label></label>\n                    <label>Sun</label>\n                    <label></label>\n                    <label></label>\n                    <label>Wed</label>\n                    <label></label>\n                    <label></label>\n                    <label>Sat</label>\n                </div>\n                <div id=\"calendar\">\n                    <div id=\"months\">\n                        {\n                            weeks.map((noOfWeeks, month) =>\n                                {\n                                    let previousWeeks = weeks.slice(0, month).reduce((totalWeeks, currentWeeks) => totalWeeks + currentWeeks, 0);\n                                    return <label key={ MONTH[month] } style={ { gridColumn: `${previousWeeks + 1} / ${previousWeeks + noOfWeeks}` } }>{ MONTH[month].toLowerCase() }</label>\n                                }\n                            )\n                        }\n                    </div>\n                    <div id=\"dates\">\n                        { Utils.newArray(new Date(props.currentYear, 0, 1).getDay()).map((val) => <div key={ val }/>) }\n                        {\n                            Utils.newArray(Utils.daysInYear(props.currentYear)).map(dayInYear => {\n                                let date = new Date(new Date(props.currentYear, 0).setDate(dayInYear + 1));\n                                let dayInMonth = date.getDate();\n                                return (\n                                    <div className=\"record_cell\" key={ dayInYear }>\n                                        <div className=\"tooltip_date\">{ `${dayInMonth}/${date.getMonth() + 1}/${date.getFullYear()}` }</div>\n                                    </div>\n                                )\n                            })\n                        }\n                    </div>\n                </div>\n            </section>\n        </section>\n    )\n}\n","/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/Utils.ts",[],[],"/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/pages/Admin/Categories/Categories.tsx",["108","109"],[],"import { useCallback, useEffect, useState } from \"react\";\nimport { DropdownMenu } from \"../../../components/DropdownMenu/DropdownMenu\";\nimport { Title } from \"../../../components/Title/Title\";\nimport Firebase from \"../../../firebase\";\nimport \"./Categories.css\";\nimport { Option } from \"../../../type\";\nimport { AddInputPanel } from \"../../../components/AddPanel/AddInputPanel\";\nimport { AddChoicePanel } from \"../../../components/AddPanel/AddChoicePanel\";\nexport const Categories = () => {\n\n    const [categories, setCategories] = useState<Array<{ label: string, id: string }>>([]);\n    const [categoryId, setCategoryId] = useState<string>();\n    const [activeDropdown, setActiveDropdown] = useState<string>();\n    const [options, setOptions] = useState<Array<Option>>([]);\n    const [addModal, setAddModal] = useState<JSX.Element>();\n\n    useEffect(() => {\n        let closeDropdown = () => {\n            console.log(\"close dropdown\");\n            setActiveDropdown(undefined)\n        };\n        window.addEventListener(\"click\", closeDropdown);\n\n        return () => window.removeEventListener(\"click\", closeDropdown);\n    }, [])\n\n    useEffect(() => {\n        Firebase.instance.getCategories().then(categories =>\n            setCategories(categories.map(category => {\n                return { label: category.title, id: category.id }\n            }))\n        );\n    }, [])\n\n    // useEffect(() => {\n    //     if (categoryId) Firebase.instance.getOptions(categoryId).then(options => setOptions(options));\n    // }, [categoryId]);\n\n    useEffect(() => {\n        if (categoryId) Firebase.instance.onOptionUpdate(categoryId, (options) => setOptions(options));\n    }, [categoryId])\n\n    const onInput = useCallback((set: React.Dispatch<string>, e: React.ChangeEvent<HTMLInputElement>) => {\n        set(e.currentTarget.value);\n    }, []);\n\n    const optionRow = useCallback((details: Option) => {\n        return (\n            <div className=\"option\" key={ details.id }>\n                <button className=\"delete\" onClick={ () => Firebase.instance.deleteOption(categoryId!, details.id)}/>\n                <input value={ details.title } onChange={ () => {} } />\n                {   details.choices ?\n                        <DropdownMenu onSelect={ (_id, e) => e.stopPropagation() } opened={ activeDropdown === details.id } onOpen={ () => setActiveDropdown(details.id) } onClose={ () => setActiveDropdown(undefined) } default={ \"顯示所有選項\" } current={ \"\" } choices={ details.choices.map(choice => { return { id: details.id, label: choice, allowRemove: true } }) } /> :\n                        <div>輸入</div>\n                }\n            </div>\n        )\n    }, [options, activeDropdown]);\n\n    return (\n        <main id=\"categories\">\n            <Title />\n            <section id=\"content\">\n                <div id=\"dropdown_big\">\n                    <DropdownMenu onSelect={ setCategoryId } opened={ activeDropdown === \"category\"} onOpen={ () => setActiveDropdown(\"category\") } onClose={ () => setActiveDropdown(undefined) } default={ \"選擇分類\" } current={ categories.find(cat => cat.id === categoryId)?.label } choices={ categories } />\n                </div>\n                { options.map(option => optionRow(option)) }\n                { categoryId && <button className=\"add\" onClick={ () => setAddModal(<AddChoicePanel categoryId={ categoryId } close={ () => setAddModal(undefined) } />) }>新增選項 ＋</button> }\n                { categoryId && <button className=\"add\" onClick={ () => setAddModal(<AddInputPanel categoryId={ categoryId } close={ () => setAddModal(undefined) } />) }>新增輸入 ＋</button> }\n            </section>\n            { addModal && addModal }\n        </main>\n    )\n}\n","/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/components/DropdownMenu/DropdownMenu.tsx",[],[],"/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/firebase.ts",["110","111","112"],[],"import { FirebaseApp, initializeApp } from \"firebase/app\";\nimport { Auth, createUserWithEmailAndPassword, getAdditionalUserInfo, getAuth, isSignInWithEmailLink, onAuthStateChanged, sendSignInLinkToEmail, signInWithEmailAndPassword, signInWithEmailLink, signOut, updatePassword, User, UserCredential } from \"firebase/auth\";\nimport { addDoc, collection, deleteDoc, doc, Firestore, getDoc, getDocs, getFirestore, onSnapshot, query, setDoc, where } from \"firebase/firestore\";\nimport { optionConverter, PendingApplcation, Option, categoryConverter } from \"./type\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDHTYHXBArEA-6bqGFdbqsG1_KLuzGRE2I\",\n  authDomain: \"rizzy-bodycraft-record.firebaseapp.com\",\n  projectId: \"rizzy-bodycraft-record\",\n  storageBucket: \"rizzy-bodycraft-record.appspot.com\",\n  messagingSenderId: \"930408534506\",\n  appId: \"1:930408534506:web:127e3be9dd6236d9836293\",\n  measurementId: \"G-SKFHESV2J6\"\n};\n\nenum COLLECTION {\n    CATEGORY = \"category\",\n    USER_PROFILE = \"user-profile\",\n    APPLICATION = \"application\"\n}\n\nexport default class Firebase {\n\n    private static _inst: Firebase;\n\n    app: FirebaseApp;\n    auth: Auth;\n    firestore: Firestore;\n\n    private constructor() {\n        console.log(\"initializing firebase\");\n        this.app = initializeApp(firebaseConfig);\n        this.auth = getAuth(this.app);\n        this.firestore = getFirestore(this.app)\n    }\n\n    public static get instance() {\n        return Firebase._inst;\n    }\n\n    static init() {\n        if (!Firebase._inst) Firebase._inst = new Firebase();\n    }\n\n    // auth\n\n    async signup(email: string, password: string, name: string) {\n        updatePassword(this.auth.currentUser!, password).then(() => {\n            this.updateUserProfile({ email, name });\n        }).catch(err => console.error(err));\n    }\n\n    async login(args: { email: string, password?: string }): Promise<boolean> {\n        const { email, password } = args;\n        if (email !== undefined) {\n            if (password !== undefined) {\n                return await new Promise((resolve, reject) => {\n                    signInWithEmailAndPassword(this.auth, email, password).then(credential => {\n                        console.log(credential);\n                        resolve(true);\n                    }).catch((err: { code: string, message: string } ) => {\n                        console.error(err.code);\n                        reject(false);\n                    });\n                });\n            }\n            else {\n                console.log(email);\n                return await new Promise((resolve, reject) =>\n                    signInWithEmailLink(this.auth, email, window.location.href).then(result => {\n                        console.log(result);\n                        resolve(true);\n                    }).catch((err: { code: string, message: string }) => {\n                        // auth/invalid-email\n                        // auth/invalid-action-code when link used to login\n                        console.error(err.code, err.message);\n                        reject(false)\n                    })\n                );\n            }\n        }\n        return false;\n    }\n\n    async logout() {\n        await signOut(Firebase.instance.auth);\n    }\n\n    onAuthStateChanged(callback: (user: User | null) => void) {\n        return onAuthStateChanged(this.auth, user => callback(user));\n    }\n\n    approvePendingAccount(email: string) {\n        const actionCodeSettings = {\n            // URL you want to redirect back to. The domain (www.example.com) for this\n            // URL must be in the authorized domains list in the Firebase Console.\n            url: 'http://localhost:3000',\n            handleCodeInApp: true\n        };\n        sendSignInLinkToEmail(this.auth, email, actionCodeSettings).then(() => console.log(\"success\")).catch((err) => console.log(\"failed\", err));\n    }\n\n    isAnnoymousAccount() {\n        return isSignInWithEmailLink(this.auth, window.location.href)\n    }\n\n    // firestore\n\n    onPendingAccountsChange(callback: (pendings: Array<PendingApplcation>) => void) {\n        return onSnapshot(collection(this.firestore, COLLECTION.APPLICATION), collection => {\n            let pendings: Array<PendingApplcation> = [];\n            collection.forEach(application => pendings.push(Object.assign({ id: application.id }, application.data() as { name: string, email: string })));\n            callback(pendings)\n        })\n    }\n\n    async removePendingAccount(id: string) {\n        await deleteDoc(doc(this.firestore, COLLECTION.APPLICATION, id));\n    }\n\n    async checkNewAccount(email: string) {\n        return !(await getDoc(doc(this.firestore, COLLECTION.USER_PROFILE, email))).exists();\n    }\n\n    async updateUserProfile(profile: { email: string, name: string }) {\n        await setDoc(doc(this.firestore, COLLECTION.USER_PROFILE, profile.email), {\n            name: profile.name,\n            email: profile.email\n        })\n    }\n\n    async getCategories() {\n        let categories: Array<any> = [];\n        await getDocs(collection(this.firestore, COLLECTION.CATEGORY).withConverter(categoryConverter)).then(cats => cats.forEach(cat => {\n            categories.push(cat.data());\n        }));\n        return categories;\n    }\n\n    // async getOptions(categoryId: string) {\n    //     let options: Array<Option> = [];\n    //     await getDocs(collection(this.firestore, COLLECTION.CATEGORY, categoryId, \"Options\").withConverter(optionConverter))\n    //         .then(opts => opts.forEach(\n    //             opt => options.push(opt.data())\n    //         ));\n    //     return options;\n    // }\n\n    onOptionUpdate(categoryId: string, onUpdate: (options: Array<Option>) => void) {\n        return onSnapshot(collection(this.firestore, COLLECTION.CATEGORY, categoryId, \"Options\").withConverter(optionConverter), opts => {\n            let options: Array<Option> = [];\n            opts.forEach(opt => options.push(opt.data()));\n            onUpdate(options);\n        })\n    }\n\n    async addOption(categoryId: string, optionLabel: string, choices?: Array<string>) {\n        if (!(await getDocs(query(collection(this.firestore, COLLECTION.CATEGORY, categoryId, \"Options\"),where(\"title\", \"==\", optionLabel)))).empty) {\n            console.warn(\"label exists\");\n            return;\n        }\n        let obj = {\n            id: \"\",\n            title: optionLabel,\n            isChoices: choices !== undefined,\n            choices: choices\n        }\n        !obj.isChoices && delete obj.choices;\n        await addDoc(collection(this.firestore, COLLECTION.CATEGORY, categoryId, \"Options\").withConverter(optionConverter), obj);\n\n    }\n\n    async deleteOption(categoryId: string, optionId: string) {\n        await deleteDoc(doc(this.firestore, COLLECTION.CATEGORY, categoryId, \"Options\", optionId))\n    }\n}\n","/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/components/Menu/Menu.tsx",[],[],"/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/pages/Admin/StudentList/StudentList.tsx",[],[],"/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/pages/User/SignUp/Signup.tsx",["113","114"],[],"import { useCallback, useContext, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Title } from \"../../../components/Title/Title\";\nimport Firebase from \"../../../firebase\";\nimport { SetLoggedInContext } from \"../../../hooks/contexts\";\nimport { useInput } from \"../../../hooks/useInput\";\nimport \"./SignUp.css\";\n\nexport const SignUp = () => {\n    const navigate = useNavigate();\n    const setLoggedIn = useContext(SetLoggedInContext);\n    const [verifiedEmail, setVerifiedEmail] = useState(false);\n    const [email, setEmail] = useInput(\"hksahenry@gmail.com\");\n    const [name, setName] = useInput(\"\");\n    const [password, setPassword] = useInput(\"\");\n    const [confirmPassword, setConfirmPassword] = useInput(\"\");\n\n    const onInput = useCallback((set: React.Dispatch<string>, e: React.ChangeEvent<HTMLInputElement>) => {\n        set(e.currentTarget.value);\n    }, []);\n\n    const onVerify = useCallback(async () => {\n        let verified = await Firebase.instance.login({ email: email });\n        if (verified) {\n            setLoggedIn(Firebase.instance.auth.currentUser !== null);\n            let isNewAccount = await Firebase.instance.checkNewAccount(email)\n            if (isNewAccount) setVerifiedEmail(true);\n            else navigate(\"/dashboard\");\n        }\n    }, [email]);\n\n    const onBackToLogin = useCallback(async () => {\n        await Firebase.instance.logout();\n        navigate(\"/\", { replace: true })\n    }, []);\n\n    const onSignup = useCallback(() => {\n        Firebase.instance.signup(email, password, name);\n    }, [email, password, name]);\n\n    return (\n        <main id=\"signup\">\n            <Title />\n            { !verifiedEmail &&\n                <section id=\"verify_email\">\n                    <h3>Verify your email</h3>\n                    <input type=\"text\" value={ email } placeholder=\"Email\" onChange={ (e) => onInput(setEmail, e) } />\n                    <button onClick={ onVerify }>Verify</button>\n                    <button onClick={ onBackToLogin }>Back to Login</button>\n                </section>\n            }\n            { verifiedEmail &&\n                <section id=\"signup_details\">\n                    <h3>Sign up</h3>\n                    <div id=\"signup_row\">\n                        <div>Email:</div>\n                        <div>{ email }</div>\n                    </div>\n                    <div id=\"signup_row\">\n                        <div>Name:</div>\n                        <input type=\"text\" value={ name } placeholder=\"Name\" onChange={ (e) => onInput(setName, e) } />\n                    </div>\n                    <div id=\"signup_row\">\n                        <div>Password:</div>\n                        <input type=\"password\" value={ password } placeholder=\"Password\" onChange={ (e) => onInput(setPassword, e) } />\n                    </div>\n                    <div id=\"signup_row\">\n                        <div>Confirm Password:</div>\n                        <input type=\"password\" value={ confirmPassword } placeholder=\"Confirm Password\" onChange={ (e) => onInput(setConfirmPassword, e) } />\n                    </div>\n                    <button onClick={ onSignup }>Sign Up</button>\n                    <button onClick={ onBackToLogin }>Back to Login</button>\n                    <div>If you do not complete the sign up procedure now, you will need to request a new email link to login again</div>\n                </section>\n            }\n        </main>\n    )\n}\n","/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/hooks/contexts.tsx",[],[],"/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/type.ts",[],[],"/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/components/AddPanel/AddInputPanel.tsx",[],[],[],"/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/hooks/useAddPanel.tsx",[],[],"/Users/HenryTsui/Desktop/rizzy-bodycraft-record/src/components/AddPanel/AddChoicePanel.tsx",[],[],{"ruleId":"115","severity":1,"message":"116","line":40,"column":8,"nodeType":"117","endLine":40,"endColumn":10,"suggestions":"118"},{"ruleId":"119","severity":1,"message":"120","line":25,"column":17,"nodeType":"121","endLine":25,"endColumn":38},{"ruleId":"122","severity":1,"message":"123","line":1,"column":10,"nodeType":"124","messageId":"125","endLine":1,"endColumn":21},{"ruleId":"122","severity":1,"message":"126","line":43,"column":11,"nodeType":"124","messageId":"125","endLine":43,"endColumn":18},{"ruleId":"115","severity":1,"message":"127","line":58,"column":8,"nodeType":"117","endLine":58,"endColumn":33,"suggestions":"128"},{"ruleId":"122","severity":1,"message":"129","line":2,"column":16,"nodeType":"124","messageId":"125","endLine":2,"endColumn":46},{"ruleId":"122","severity":1,"message":"130","line":2,"column":48,"nodeType":"124","messageId":"125","endLine":2,"endColumn":69},{"ruleId":"122","severity":1,"message":"131","line":2,"column":226,"nodeType":"124","messageId":"125","endLine":2,"endColumn":240},{"ruleId":"115","severity":1,"message":"132","line":30,"column":8,"nodeType":"117","endLine":30,"endColumn":15,"suggestions":"133"},{"ruleId":"115","severity":1,"message":"134","line":35,"column":8,"nodeType":"117","endLine":35,"endColumn":10,"suggestions":"135"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["136"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","@typescript-eslint/no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'onInput' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'categoryId'. Either include it or remove the dependency array.",["137"],"'createUserWithEmailAndPassword' is defined but never used.","'getAdditionalUserInfo' is defined but never used.","'UserCredential' is defined but never used.","React Hook useCallback has missing dependencies: 'navigate' and 'setLoggedIn'. Either include them or remove the dependency array.",["138"],"React Hook useCallback has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["139"],{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},{"desc":"140","fix":"146"},"Update the dependencies array to be: [navigate]",{"range":"147","text":"148"},"Update the dependencies array to be: [activeDropdown, categoryId]",{"range":"149","text":"150"},"Update the dependencies array to be: [email, navigate, setLoggedIn]",{"range":"151","text":"152"},{"range":"153","text":"148"},[1493,1495],"[navigate]",[2652,2677],"[activeDropdown, categoryId]",[1308,1315],"[email, navigate, setLoggedIn]",[1461,1463]]